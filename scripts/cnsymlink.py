import modules.scripts as scripts
import gradio as gr
import os
import subprocess

sdroot = "/".join(os.path.realpath(__file__).split("extensions")[0].split("/")[:-1])

sdmodels = os.path.join(sdroot, "models/ControlNet")
controlnet_path = os.path.join(sdroot, "extensions/rectal_control/")
controlnet_temp = os.path.join(controlnet_path, "tmp")
controlnet_models_path = os.path.join(controlnet_path, "models")
controlnet_annotators_path = os.path.join(controlnet_path, "annotator")


# —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–ª–∏–Ω–∫–æ–≤ –∏–∑ –æ–±—â–µ–π –ø–∞–ø–∫–∏ –≤ —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è gdshare_linker("ControlNet/models", controlnet_path)
def gdshare_linker(gdpath, dest_path) -> str:
    gdrive_folder = "/content/drive/MyDrive/colab_files/"
    gdpath = f"{gdrive_folder}{gdpath}"
    target = os.path.join(dest_path, gdpath.split('/')[-2] if gdpath.endswith('/') else gdpath.split('/')[-1])
    os.makedirs(dest_path, exist_ok=True)
    os.makedirs(controlnet_temp, exist_ok=True)

    def linking():
        for root, dirs, files in os.walk(gdpath):
            for file in files:
                file_path = os.path.join(root, file)
                dest_file_path = os.path.join(dest_path, file)
                if not os.path.exists(dest_file_path):
                    subprocess.run(['ln', '-s', file_path, dest_file_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                    if not os.path.exists(dest_file_path):
                        os.symlink(file_path, dest_file_path)

    if os.path.exists(gdpath):
        try:
            linking()
            return "—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üîÑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç–∞. –í–ù–ò–ú–ê–ù–ò–ï: –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –º–æ–¥–µ–ª–µ–π —É –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç–∞ –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –≤—Ä–µ–º—è!!!"
        except FileExistsError:
            try:
                subprocess.run(['rm', '-rf', target], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                linking()
                return "—Ñ–∞–π–ª—ã –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã, —Ç.–∫. –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º. —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üîÑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–æ–ø–æ–ª–µ–Ω–∏–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç–∞. –í–ù–ò–ú–ê–ù–ò–ï: –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –º–æ–¥–µ–ª–µ–π —É –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç–∞ –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –≤—Ä–µ–º—è!!!"
            except Exception as e:
                return f"–æ—à–∏–±–∫–∞: {e}"
        except OSError:
            return "—Å–æ–∑–¥–∞—Ç—å —Å–∏–º–ª–∏–Ω–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å!"
    else:
        if not os.path.exists(gdpath):
            return "–Ω–∞ —Ç–≤–æ–µ–º –≥—É–≥–ª–æ–¥–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—â–∞—è –ø–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç"
        else:
            return "—Ö–∑"


class ExtensionTemplateScript(scripts.Script):
    def title(self):
        return "–¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª–∏ ControlNet"

    def show(self, is_img2img):
        return scripts.AlwaysVisible

    def ui(self, is_img2img):
        with gr.Accordion('–º–æ–¥–µ–ª–∏ ControlNet', elem_id="controlnet_models_gdrive", open=False):
            def cn_sd():
                gdshare_linker("ControlNet/bin/sd", sdmodels)
                return gdshare_linker("ControlNet/models", controlnet_models_path)

            def cn_sdxl():
                gdshare_linker("ControlNet/bin/sdxl", sdmodels)
                return gdshare_linker("ControlNet/models_xl", controlnet_models_path)

            cnsymlinker_results = gr.Textbox(value="–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏", label="", lines=10, elem_id="cnsymlinker_results")
            cn_sd_button = gr.Button("–º–æ–¥–µ–ª–∏ SD", elem_id="cn_sd_symlinker_button")
            cn_sdxl_button = gr.Button("–º–æ–¥–µ–ª–∏ SDXL", elem_id="cn_sdxl_symlinker_button")
            cn_sd_button.click(fn=cn_sd, outputs=cnsymlinker_results)
            cn_sdxl_button.click(fn=cn_sdxl, outputs=cnsymlinker_results)

        return [cnsymlinker_results, cn_sd_button, cn_sdxl_button]
